name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.20', '1.21']
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Build Rust library
      run: |
        cargo build --release
        chmod +x build.sh
        ./build.sh
    
    - name: Run Rust tests
      run: cargo test
    
    - name: Run Go tests
      run: |
        # 设置库路径环境变量
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
          export CGO_LDFLAGS="-L$PWD -lrust_add_ffi"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          export DYLD_LIBRARY_PATH=$PWD:$DYLD_LIBRARY_PATH
          export CGO_LDFLAGS="-L$PWD -lrust_add_ffi"
        fi
        go test -v -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
    
    - name: Run Go vet
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          export DYLD_LIBRARY_PATH=$PWD:$DYLD_LIBRARY_PATH
        fi
        go vet ./...
    
    - name: Run Go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi